local tbl = 
{
	class = "BehaviorTree",
	nodes = 
	{
		
		{
			class = "Sequence",
			nodes = 
			{
				
				{
					class = "Action",
					nodes = 
					{
					},
					settings = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Continue only if we are ingame",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Guest Server ID: '..tostring(Settings.GW2Minion.guestserver))\nGUI:Text(\"Guest Server Name: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver])\nGUI:Text('Autologin Enabled: '..tostring(Settings.GW2Minion.autostartbot))\nGUI:Text('GameState: '..tostring(ml_global_information.GameState))\nif (self.lastrun) then\n\tGUI:Text('Lastrun: '..tostring(TimeSince(self.lastrun)))\nend\n\n",
						runcode = "if ( ml_global_information.GameState == GW2.GAMESTATE.GAMEPLAY ) then\n\tself:success()\nelse\n\tself:fail()\nend",
						startcode = "",
					},
				},
				
				{
					class = "Sequence",
					nodes = 
					{
						
						{
							class = "RepeatUntilSuccess",
							nodes = 
							{
								
								{
									class = "PrioritySelector",
									nodes = 
									{
										
										{
											class = "Action",
											nodes = 
											{
											},
											settings = 
											{
											},
											variables = 
											{
												filename = "",
												finishcode = "",
												info = "Check if we need to join the lobby or queue up for a new match",
												menucode = "",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
												runcode = "if (PvPManager:IsInMatch() == false or PvPManager:IsInPvPLobby() == true) then\n\t\t-- returning fail to our parent-priority selector, will make it call the 2nd node\n\t\tself:fail()\nelse\n\t\t-- we are inside a pvp match\n\t\tself:success()\nend",
												startcode = "",
												subtreeuicode = "",
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													settings = 
													{
													},
													variables = 
													{
														filename = "",
														finishcode = "context.isnewmatch = nil",
														info = "Joining & Queueing up.",
														menucode = "",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "-- Join PvP Lobby\nif (PvPManager:IsInPvPLobby() == false) then\n\t\tif ( ml_global_information.Player_InCombat ) then\n\t\t\t\td(\"[sPvP] - Player In Combat, cannot join sPvP Lobby...\")\n\t\t\t\tcontext.status = GetString(\"Player In Combat, cannot join sPvP Lobby..\")\n\t\t\t\tself:fail()\n\n\t\telse\n\t\t\t\td(\"[sPvP] -  Joining sPvP Lobby :\"..tostring(PvPManager:JoinPvPLobby()))\n\t\t\t\tcontext.status = GetString(\"Joining sPvP Lobby..\")\n\t\t\t\tself:running()\n\tend\n\nelse\n\t\t-- We are in the Lobby, Join a Match\n\t\tif ( PvPManager:IsInMatch() == false ) then\n\t\t\t\tif ( PvPManager:IsArenaQueued() == false ) then\n\t\t\t\t\t\tif ( Settings.sPvP.queuemode == 1 ) then\n\t\t\t\t\t\t\t\td(\"[sPvP] - Joining Unranked Queue: \"..tostring(PvPManager:JoinArenaQueue(1)))\n\t\t\t\t\t\t\t\tcontext.status = GetString(\"Joined Unranked Queue..\")\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\td(\"[sPvP] - Joining Ranked Queue: \"..tostring(PvPManager:JoinArenaQueue(2)))\n\t\t\t\t\t\t\t\tcontext.status = GetString(\"Joined Ranked Queue..\")\n\t\t\t\t\t\tend\n\t\t\t\t\t\tcontext.setready = nil\n\t\t\t\t\t\tcontext.setready2 = nil\n\t\t\t\t\t\tself:fail()\n\t\t\t\telse\n\t\t\t\t\t\t-- Waiting for a match to come available...\n\t\t\t\t\t\tif(PvPManager:IsMatchAvailable() )then\n\t\t\t\t\t\t\t\td(\"[sPvP] - Match Available\")\n\t\t\t\t\t\t\t\tcontext.status = GetString(\"Match Available..\")\n\t\t\t\t\t\t\t\tif ( not context.setready ) then\n\t\t\t\t\t\t\t\t\t\td(\"[sPvP] - Set Ready for Match: \"..tostring(PvPManager:SetReady()))\n\t\t\t\t\t\t\t\t\t\tcontext.status = GetString(\"Match Available..Ready!\")\n\t\t\t\t\t\t\t\t\t\tcontext.setready = true\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t-- when the match failes to start, a 2nd ismatchavailable screen pops up...need to handle the setready again\n\t\t\t\t\t\t\t\tcontext.setready = nil\n\n\t\t\t\t\t\tend\n\t\t\t\t\t\tself:fail()\n\t\t\t\tend\n\t\tend\nend\n",
														startcode = "",
														subtreeuicode = "",
													},
												},
											},
											settings = 
											{
												duration = 5000,
											},
											variables = 
											{
												info = "Don't spam Join PvP lobby nor any other queue up function.",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.settings.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(round(self.settings.duration/1000))..' s') end",
											},
										},
									},
									settings = 
									{
									},
									variables = 
									{
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "",
								info = "Repeat the Join sPvP Code until we are in a sPvP Match",
								menucode = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
								subtreeuicode = "",
							},
						},
					},
					settings = 
					{
					},
					variables = 
					{
						info = "Queue up / Making sure we are in a sPvP Match",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
					},
				},
				
				{
					class = "PrioritySelector",
					nodes = 
					{
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "",
										finishcode = "",
										info = "Match has Ended?",
										menucode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if(PvPManager:IsMatchFinished()) then\n\t\tcontext.status = \"Match finished..\"\n  context.gatewasclosed = false\n\t\tPlayer:StopMovement()\n\t\tself:success()\nelse\n\t\tself:fail()\nend\n",
										startcode = "",
										subtreeuicode = "",
									},
								},
								
								{
									class = "Wait",
									nodes = 
									{
									},
									settings = 
									{
										duration = 7500,
									},
									variables = 
									{
										info = "wait 5 seconds",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.starttime ) then\tif ( self:getState() == 'success' ) then GUI:Text('Passed Time: '..tostring(round(self.settings.duration/1000))..' s') else GUI:Text('Passed Time: '..tostring(round(GetTickCount() - self.starttime,2 ))..' s') end else GUI:Text('Passed Time: 0 ms') end",
									},
								},
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "",
										finishcode = "",
										info = "Update Win/Lost Statistics and Leave the Lobby",
										menucode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "-- Update statistics\nif ( context.currentteam ) then\n\t\tPlayer:StopMovement()\n\n\t\tif (PvPManager:GetScore(1) > PvPManager:GetScore(2))then -- red team won\n\t\t\t\tif (context.currentteam == \"red\") then\n\t\t\t\t\t\tSettings.sPvP.win = Settings.sPvP.win + 1\n\t\t\t\telse\n\t\t\t\t\t\tSettings.sPvP.lost = Settings.sPvP.lost + 1\n\t\t\t\tend\n\t\telse\n\t\t\t\tif (context.currentteam == \"blue\") then\n\t\t\t\t\t\tSettings.sPvP.win = Settings.sPvP.win + 1\n\t\t\t\telse\n\t\t\t\t\t\tSettings.sPvP.lost = Settings.sPvP.lost + 1\n\t\t\t\tend\n\t\tend\nend\n\n-- Leave Match\ncontext.currentteam = nil\ncontext.gatewasclosed = nil\ncontext.status = \"Leaving Match..\"\nd(\"[sPvP] - Leaving Match : \"..tostring(PvPManager:JoinPvPLobby()))\nself:success()\n",
										startcode = "",
										subtreeuicode = "",
									},
								},
								
								{
									class = "Wait",
									nodes = 
									{
									},
									settings = 
									{
										duration = 8000,
									},
									variables = 
									{
										info = "Wait another 8 Seconds after Leaving the Match",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.starttime ) then\tif ( self:getState() == 'success' ) then GUI:Text('Passed Time: '..tostring(round(self.settings.duration/1000))..' s') else GUI:Text('Passed Time: '..tostring(round(GetTickCount() - self.starttime,2 ))..' s') end else GUI:Text('Passed Time: 0 ms') end",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								info = "Match Ended Handler",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "",
										finishcode = "",
										info = "Check if the Match has not yet started",
										menucode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "-- Update our Team\nif ( not context.currentteam ) then\n -- 1 = red / 2 = blue\t\n\t\tlocal curTeam = PvPManager:GetTeam(1)\n\t\n\t\tif ( ValidTable(curTeam) ) then\n\t\t\t\tcontext.currentteam = \"blue\"\n\t\t\t\tlocal id,v = next(curTeam)\n\t\t\t\twhile ( id ~= nil ) do\n\t\t\t\t\t\tif Player.id == v.id then\n\t\t\t\t\t\t\t\tcontext.currentteam = \"red\"\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\t\tid,v = next(curTeam, id)\n\t\t\t\tend\n\t\t\t\td(\"[sPvP] - Current Team is : \"..tostring(context.currentteam))\n\n\t\t\t\t-- Setting Ready ingame once\n\t\t\t\tif ( not context.setready2 ) then\t\t\n\t\t\t\t\t\td(\"[sPvP] - Set Ready for Match: \"..tostring(PvPManager:SetReady()))\n\t\t\t\t\t\tcontext.setready2 = true\n\t\t\t\t\t\tcontext.status = \"Ready, Waiting for start..\" \n\t\t\t\tend\n\t\tend\nend\n\n\n-- Check if the Match has started\nif (PvPManager:GetScore(1) == 0 and PvPManager:GetScore(2) == 0) then\n\t\tlocal duration = PvPManager:GetMatchDuration()\n\n\t\tif (context.gatewasclosed == true and context.PvPStartGatesOpen() == false) then\n\t\t\t\tself:success() -- we need to wait before the match starts\n\t\t\t\treturn \n\t\tend\n\n\t\tif (duration < 100000) then\n\t\t\t\tif (not context.PvPStartGatesOpen()) then\n\t\t\t\t\t\td(\"Gate was closed!\")\n\t\t\t\t\t\tcontext.gatewasclosed = true\t\t\t\n\t\t\t\t\t\tself:success() -- we need to wait before the match starts\n\t\t\t\t\t\treturn\n\t\t\t\telse\n\t\t\t\t\t\tif (duration < 15000 or ( duration > 15000 and not context.gatewasclosed)) then\n\t\t\t\t\t\t\t\tself:success() -- we need to wait before the match starts\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\tend\t\t\n\t\t\t\tend\n\n\t\telse\n\t\t\t\t-- this can fail due to being able to take damage before the match actually started..i think..\n\t\t\t\tif (context.PvPFightStarted()) then \n\t\t\t\t\t\tself:fail()\n\t\t\t\t\t\treturn\n\t\t\t\tend\n\t\tend\nend\n-- Match has already started\nself:fail()",
										startcode = "",
										subtreeuicode = "",
									},
								},
								
								{
									class = "Wait",
									nodes = 
									{
									},
									settings = 
									{
										duration = 1000,
									},
									variables = 
									{
										info = "Waiting some seconds before we check again if the match started",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.starttime ) then\tif ( self:getState() == 'success' ) then GUI:Text('Passed Time: '..tostring(round(self.settings.duration/1000))..' s') else GUI:Text('Passed Time: '..tostring(round(GetTickCount() - self.starttime,2 ))..' s') end else GUI:Text('Passed Time: 0 ms') end",
									},
								},
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "",
										finishcode = "",
										info = "TODO: Add random movement or Jump here while we are waiting.",
										menucode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "local boink = math.random(1,70)\nif (boink == 1 ) then\n\t\tPlayer:Jump()\nend\n\nif (boink == 2 ) then\n\t\tPlayer:CastSpell(math.random(5,9))\nend\n\nself:success()",
										startcode = "",
										subtreeuicode = "",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								info = "Match Starting Handler",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "SubTree",
							nodes = 
							{
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "DeathHandler.st",
							},
						},
						
						{
							class = "SubTree",
							nodes = 
							{
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "DownedHandler.st",
							},
						},
						
						{
							class = "SubTree",
							nodes = 
							{
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "ReviveDownedPlayers.st",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "",
										finishcode = "",
										info = "Find Enemy which we can finish (closeby)",
										menucode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if ( Settings.GW2Minion.finishenemyassist == true) then\nif( ml_global_information.Player_Health.percent > 15) then\n\t\tlocal targetlist = CharacterList(\"interactable,attackable,shortestpath,onmesh,attackable,downed,maxdistance=800,maxpathdistance=900\")\n\t\tif ( ValidTable(targetlist) ) then\t\t\t\n\t\t\tlocal target = select(2,next(targetlist))\n\t\t\tif ( target ) then\n\t\t\t\t\tcontext.finishtargetid = target.id\n\t\t\t\t\tcontext.status = \"Finishing \"..tostring(target.name)\n\t\t\t\t\tself:success()\n\t\t\t\t\treturn\n\t\t\tend\n\t\tend\nend\nend\ncontext.finishtargetid = nil\nself:fail()",
										startcode = "",
										subtreeuicode = "",
									},
								},
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "",
										finishcode = "Player:StopMovement()",
										info = "Finish Enemy (closeby)",
										menucode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if ( context.finishtargetid ) then\n\t\tlocal target = CharacterList:Get(context.finishtargetid)\n\t\tif ( table.valid(target) and target.downed and target.onmesh and target.interactable) then\n\t\t\t\tif ( target.isininteractrange ) then\n\t\t\t\t\t\tlocal curTarget = Player:GetTarget()\t\t\t\t\t\t\n\t\t\t\t\t\tif ( not curTarget or curTarget.id ~= target.id ) then\n\t\t\t\t\t\t\t\tPlayer:SetTarget(target.id)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif ( Player.castinfo.skillid == 0 ) then\n\t\t\t\t\t\t\t\tPlayer:Interact( target.id )\n\t\t\t\t\t\tend\n\t\t\t\t\t\td(\"[sPvP] - Finishing Enemy..\")\n\t\t\t\t\t\tcontext.status = \"Finishing \"..tostring(target.name)\n\t\t\t\t\t\tself:success()\n\t\t\t\t\t\treturn\n\t\t\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\t\tlocal p = target.pos\n\t\t\t\t\t\tif ( NavigationManager:MoveTo(p.x,p.y,p.z) > 0 ) then\n\t\t\t\t\t\t\t\tcontext.status = \"Move to Finish \"..tostring(target.name)\n\t\t\t\t\t\t\t\tself:running()\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\td(\"[sPvP] - Cannot find a path to the Finish-Enemy\")\n\t\t\t\t\t\tend\n\t\t\t\tend\n\t\tend\nend\ncontext.finishtargetid = nil\nPlayer:StopMovement()\nself:fail()",
										startcode = "",
										subtreeuicode = "",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								info = "Finish Enemy",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "Find Aggro Target and Set the aggro context.combat_targetid",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "local target = context.GetBestAggroTarget()\nif (table.valid(target) and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Temporary Combat\"),target.id)) then\n\t\tif(context.combat_targetid ~= target.id) then\n\t\t\t\tPlayer:StopMovement()\n\t\tend\n\t\tcontext.combat_targetid = target.id\n\t\tcontext.combat_targetpos = target.pos\n\t\tcontext.status = \"Attacking Target \"..target.name\n\t\tself:success()\n\t\treturn\nelseif(table.valid(target)) then\n\t\tcontext.combat_targetid = nil\nend\n\nself:fail()\n",
										startcode = "",
									},
								},
								
								{
									class = "PrioritySelector",
									nodes = 
									{
										
										{
											class = "Action",
											nodes = 
											{
											},
											settings = 
											{
											},
											variables = 
											{
												finishcode = "",
												info = "Aggro CombatOverWatch - updates context.combat_target ",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
												runcode = "if ( context.combat_targetid ) then\n\t\tlocal target = CharacterList:Get(context.combat_targetid) or GadgetList:Get(context.combat_targetid)\n\t\tif (table.valid(target) and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Monsters\"),target.contentid) and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Temporary Combat\"),target.id) and (target.isAggro or target.isplayer) and target.attackable and target.alive and target.onmesh) then\n\t\t\t\tcontext.combat_targetid = target.id\n\t\t\t\tcontext.combat_targetpos = target.pos\n\n\t\t\t\t-- switch aggro target if a better one was found\n\t\t\t\tlocal bettertarget = gw2_common_functions.GetBestAggroTarget()\n\t\t\t\tif (table.valid(bettertarget) and bettertarget.id ~= target.id and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Monsters\"),bettertarget.contentID) and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Temporary Combat\"),bettertarget.id)) then\n\t\t\t\t\t\tcontext.combat_targetid = bettertarget.id\n\t\t\t\t\t\tcontext.combat_targetpos = bettertarget.pos\n\t\t\t\t\t\tcontext.status = \"Attacking Target \"..bettertarget.name\n\t\t\t\tend\n\t\t\t\tcontext.combat_moveintocombatrange = true\n\t\telse\n\t\t\t\td(\"[HandleAggro] - Aggro Target is dead or gone\")\n\t\t\t\tcontext.combat_targetid = nil\n\t\t\t\tcontext.combat_target = nil\n\t\tend\nend\nself:fail()",
												startcode = "",
											},
										},
										
										{
											class = "SubTree",
											nodes = 
											{
											},
											settings = 
											{
											},
											variables = 
											{
												filename = "CombatHandler.st",
											},
										},
									},
									settings = 
									{
									},
									variables = 
									{
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "HandleAggro",
								info = "Handle Aggro sPvP",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "Finish Enemies which are further away",
										monitorcode = "",
										runcode = "if ( Settings.GW2Minion.finishenemyassist == true) then\nif( ml_global_information.Player_Health.percent > 15) then\n\t\tlocal targetlist = CharacterList(\"interactable,attackable,shortestpath,onmesh,attackable,downed,maxdistance=1200,maxpathdistance=2000\")\n\t\tif ( ValidTable(targetlist) ) then\t\t\t\n\t\t\tlocal target = select(2,next(targetlist))\n\t\t\tif ( target ) then\n\t\t\t\t\tcontext.finishtargetid = target.id\n\t\t\t\t\tcontext.status = \"Finishing \"..tostring(target.name)\n\t\t\t\t\tself:success()\n\t\t\t\t\treturn\n\t\t\tend\n\t\tend\nend\nend\ncontext.finishtargetid = nil\nself:fail()",
										startcode = "",
									},
								},
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "Finish Enemy",
										monitorcode = "",
										runcode = "if ( context.finishtargetid ) then\n\t\tlocal target = CharacterList:Get(context.finishtargetid)\n\t\tif ( table.valid(target) and target.downed and target.onmesh and target.interactable) then\n\t\t\t\tif ( target.isininteractrange ) then\n\t\t\t\t\t\tlocal curTarget = Player:GetTarget()\t\t\t\t\t\t\n\t\t\t\t\t\tif ( not curTarget or curTarget.id ~= target.id ) then\n\t\t\t\t\t\t\t\tPlayer:SetTarget(target.id)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif ( Player.castinfo.skillid == 0 ) then\n\t\t\t\t\t\t\t\tPlayer:Interact( target.id )\n\t\t\t\t\t\tend\n\t\t\t\t\t\td(\"[sPvP] - Finishing Enemy..\")\n\t\t\t\t\t\tcontext.status = \"Finishing \"..tostring(target.name)\n\t\t\t\t\t\tself:success()\n\t\t\t\t\t\treturn\n\t\t\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\t\tlocal p = target.pos\n\t\t\t\t\t\tif ( NavigationManager:MoveTo(p.x,p.y,p.z) > 0 ) then\n\t\t\t\t\t\t\t\tcontext.status = \"Move to Finish \"..tostring(target.name)\n\t\t\t\t\t\t\t\tself:running()\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\td(\"[sPvP] - Cannot find a path to the Finish-Enemy\")\n\t\t\t\t\t\tend\n\t\t\t\tend\n\t\tend\nend\ncontext.finishtargetid = nil\nPlayer:StopMovement()\nself:fail()",
										startcode = "",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "SubTree",
							nodes = 
							{
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "ReviveHandler.st",
							},
						},
						
						{
							class = "PrioritySelector",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "Capture Point",
										monitorcode = "",
										runcode = "local gadget = context.PvPGetBestCapturePoint()\nif ( table.valid(gadget) ) then\t\t\t\t\n\t\tif ( gadget.meshpos.distance <= 180) then\n\t\t\t\tif (Player:IsMoving()) then\n\t\t\t\t\t\tPlayer:StopMovement()\n\t\t\t\tend\t\t\t\t\n\t\t\t\tcontext.status = \"Capturing Point \"..tostring(gadget.name)\n\t\t\t\tself:success()\n\t\t\t\treturn\n\t\tend\nend\nself:fail()",
										startcode = "",
									},
								},
								
								{
									class = "Sequence",
									nodes = 
									{
										
										{
											class = "Action",
											nodes = 
											{
											},
											settings = 
											{
											},
											variables = 
											{
												finishcode = "",
												info = "Move to Capture Point",
												monitorcode = "",
												runcode = "local gadget = context.PvPGetBestCapturePoint()\nif ( table.valid(gadget) ) then\n\t\tlocal mpos = gadget.meshpos\t\t\n\t\tif ( mpos.distance > 180 ) then\n\t\t\t\tcontext.moveto_position = mpos\n\t\t\t\tcontext.status = \"Move to Capture \"..gadget.name\n\t\t\t\tself:success()\n\t\t\t\treturn\n\t\tend\t\t\t\nend\nself:fail()\n",
												startcode = "",
											},
										},
										
										{
											class = "SubTree",
											nodes = 
											{
											},
											settings = 
											{
												randomMovement = true,
												randomizestoppingdistance = false,
												smoothturns = true,
												stoppingdistance = 25,
												stoppingidstancemaxrange = 50,
												usewaypoints = false,
											},
											variables = 
											{
												filename = "MoveTo.st",
											},
										},
									},
									settings = 
									{
									},
									variables = 
									{
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								monitorcode = "",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "if ( context.smmode ) then\n\t\tSettings.GW2Minion.smmode = context.smmode\nend",
										info = "Find Target and Set the aggro context.combat_targetid",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "-- Getting the nearest enemy on the map\nlocal enemylist = CharacterList(\"attackable,player,hostile,alive,nearest,shortestpath,exclude=\"..gw2_blacklistmanager.GetExcludeString(GetString(\"Temporary Combat\")))\nif(table.valid(enemylist)) then\n\t\tlocal id,target = next(enemylist)\n\t\tif(table.valid(target)) then\n\t\t\t\tcontext.combat_targetid = id\n\t\t\t\tcontext.combat_targetpos = target.pos\n\t\t\t\tcontext.status = \"Attacking Enemy \"..target.name\n\t\t\t\tself:success()\n\t\t\t\treturn\n\t\tend\nend\ncontext.combat_targetid = nil\nself:fail()\n\n",
										startcode = "",
									},
								},
								
								{
									class = "SubTree",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "CombatHandler.st",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "HandleAggro",
								info = "Find Enemies and Attack them",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "SubTree",
							nodes = 
							{
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "MoveToRandom.st",
							},
						},
					},
					settings = 
					{
					},
					variables = 
					{
						info = "Inside a sPvP Match",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
					},
				},
			},
			settings = 
			{
				failThreshold = 1,
				successThreshold = 1,
			},
			variables = 
			{
				info = "GameState Check",
				monitorcode = "\n",
			},
		},
	},
	settings = 
	{
		doevents = true,
		gather = true,
	},
	variables = 
	{
		filename = "sPvP.bt",
		finishcode = "d(\"sPvP Mode Deactivated\")\nml_global_information.Stop()",
		info = "",
		menucode = "if ( Settings.sPvP.queuemode == nil) then Settings.sPvP.queuemode = 1 end\nif ( Settings.sPvP.win == nil) then Settings.sPvP.win = 0 end\nif ( Settings.sPvP.lost == nil) then Settings.sPvP.lost = 0 end\nif ( Settings.GW2Minion.smtargetmode == nil) then Settings.GW2Minion.smtargetmode = 1 end\nif ( Settings.GW2Minion.smmode == nil) then Settings.GW2Minion.smmode = 1 end\n\nGUI:SetNextTreeNodeOpened(true,GUI.SetCond_Appearing)\nif (GUI:TreeNode(GetString(\"sPvP Settings\"))) then\n\n\t\tGUI:PushItemWidth(150)\n\t\tSettings.sPvP.queuemode = GUI:Combo(GetString(\"PvP Queue\"), Settings.sPvP.queuemode, { [1] = GetString(\"Unranked\"), [2] = GetString(\"Ranked\" )})\n\t\tSettings.GW2Minion.smtargetmode = GUI:Combo(GetString(\"sMtargetmode\"),Settings.GW2Minion.smtargetmode,{GetString(\"None\"),GetString(\"LowestHealth\"),GetString(\"Closest\"),GetString(\"Biggest Crowd\"),})\n\t\tGUI:PopItemWidth()\n\n\t\tif (context and context.status) then\t\t\n\t\t\t\tGUI:Text(\"Status: \"..tostring(context.status))\n\t\telse\n\t\t\t\tGUI:Text(\"Status: None\")\n\t\tend\n\t\t\n\t\t-- Stats\n\t\tif (GUI:TreeNode(GetString(\"Statistics\"))) then\n\t\t\t\tGUI:Text(GetString(\"Matches Won : \"..tostring(Settings.sPvP.win)))\n\t\t\t\tGUI:Text(GetString(\"Matches Lost: \"..tostring(Settings.sPvP.lost)))\n\t\t\t\tGUI:Text(GetString(\"Match Duration: \"..tostring(PvPManager:GetMatchDuration())))\n\t\t\t\tGUI:Text(GetString(\"Match Score: \"..tostring(PvPManager:GetScore(1)..\" - \"..tostring(PvPManager:GetScore(2)))))\n\n\t\t\t\tif ( context.setready ) then \n\t\t\t\t\t\tGUI:Text(\"Set Ready Outside: true\")\n\t\t\t\telse\n\t\t\t\t\t\tGUI:Text(\"Set Ready Outside: false\")\n\t\t\t\tend\n\n\t\t\t\tif ( context.setready2 ) then \n\t\t\t\t\t\tGUI:Text(\"Set Ready Inside: true\")\n\t\t\t\telse\n\t\t\t\t\t\tGUI:Text(\"Set Ready Inside: false\")\n\t\t\t\tend\n\n\t\t\t\tif ( context.currentteam ) then\n\t\t\t\t\t\tGUI:Text(\"Current Team: \"..tostring(context.currentteam))\n\t\t\t\telse\n\t\t\t\t\t\tGUI:Text(\"Current Team: None\")\n\t\t\t\tend\n\n\t\t\t\tif(context.PvPFightStarted and context.PvPFightStarted()) then\n\t\t\t\t\t\tGUI:Text(\"Fight Started: true\")\n\t\t\t\telse\n\t\t\t\t\t\tGUI:Text(\"Fight Started: false\")\n\t\t\t\tend\n\n\t\t\t\tif(context.PvPStartGatesOpen and context.PvPStartGatesOpen()) then\n\t\t\t\t\t\tGUI:Text(\"Start Gates Open: true\")\n\t\t\t\telse\n\t\t\t\t\t\tGUI:Text(\"Start Gates Open: false\")\n\t\t\t\tend\n\n\t\t\t\tif(context.gatewasclosed) then\n\t\t\t\t\t\tGUI:Text(\"Gate was closed: true\")\n\t\t\t\telse\n\t\t\t\t\t\tGUI:Text(\"Gate was closed: false\")\n\t\t\t\tend\n\t\t\n\t\t\t\tlocal gates = GadgetList(\"contentid=17513,maxdistance=1000,nearest\")\n\t\t\t\tGUI:Text(\"Gates Nearby: \"..tostring(table.size(gates)))\n\n\t\t\t\tif(context.PvPGetBestCapturePoint) then\n\t\t\t\t\t\tlocal cap = context.PvPGetBestCapturePoint()\t\t\n\t\t\t\t\t\tif ( table.valid(cap) ) then\n\t\t\t\t\t\t\t\tGUI:Text(\"Capture Point: \"..tostring(cap.id)..\" - Dist: \"..tostring(cap.distance))\n\t\t\t\t\t\t\t\tGUI:Text(\"Capture Point Status: \"..tostring(cap.status))\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tGUI:Text(\"No Capture Points Nearby!\")\n\t\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif (context.GetBestAggroTarget()) then\n\t\t\t\t\t\tlocal at = context.GetBestAggroTarget()\n\t\t\t\t\t\tif (table.valid(at)) then\n\t\t\t\t\t\t\t\tGUI:Text(\"BestAggroTarget: \"..at.name..\" ID: \"..tostring(at.id))\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tGUI:Text(\"BestAggroTarget: None\")\n\t\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tGUI:TreePop()\n\t\tend\n\n\t\tGUI:TreePop()\nend",
		monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Game State: '..tostring(ml_global_information.GameState))\n",
		runcode = "",
		startcode = "d(\"sPvP Mode Activated\")\nml_global_information.Start()\n\ncontext.gatewasclosed = false",
		subtreeuicode = "",
	},
}



return tbl